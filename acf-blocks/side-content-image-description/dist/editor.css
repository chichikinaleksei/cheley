/****************
 * Fonts
 ****************/
/****************
 * Paints
 ****************/
/****************
 * Effects
 ****************/
/****************
 * Grid Settings
 ****************/
.block-editor-block-list__layout {
  /****************
   * Fonts
   ****************/
  /****************
   * Paints
   ****************/
  /****************
   * Effects
   ****************/
  /****************
   * Grid Settings
   ****************/
}
.block-editor-block-list__layout .block-side-content {
  padding-top: 2.375rem;
  position: relative;
  overflow: hidden;
}
@media (min-width: 48rem) {
  .block-editor-block-list__layout .block-side-content {
    padding-top: 5rem;
  }
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content {
    overflow: visible;
  }
}
.block-editor-block-list__layout .block-side-content::before {
  content: "";
  width: 5.875rem;
  height: 7.125rem;
  position: absolute;
  top: 0;
  right: -0.6875rem;
  background-image: url("../../../images/side-content-image-description/logo.png");
  background-repeat: no-repeat;
  background-size: contain;
  opacity: 0.2;
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content::before {
    width: 10.75rem;
    height: 13rem;
    top: 0;
    left: -0.875rem;
  }
}
.block-editor-block-list__layout .block-side-content__title {
  padding-bottom: 1.3125rem;
  position: relative;
  margin-bottom: 1.5rem;
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__title {
    padding-bottom: 2.5625rem;
    margin-bottom: 2rem;
  }
}
.block-editor-block-list__layout .block-side-content__title::before {
  content: "";
  display: block;
  width: 6.25rem;
  height: 0.0625rem;
  position: absolute;
  bottom: 0;
  left: 0;
  background-color: #000;
}
.block-editor-block-list__layout .block-side-content__text {
  margin-bottom: 3.25rem;
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__text {
    position: sticky;
    top: 13.75rem;
    margin-top: 0.5rem;
  }
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__content {
    max-width: 76%;
  }
}
.block-editor-block-list__layout .block-side-content .c-btn-wrapper {
  max-width: 80%;
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content .c-btn-wrapper {
    max-width: 100%;
    margin-top: 0;
  }
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__description {
    display: flex;
    margin-bottom: 3.25rem;
    gap: 1.125rem;
  }
}
.block-editor-block-list__layout .block-side-content__description-image {
  position: relative;
  margin-bottom: 1.75rem;
}
.block-editor-block-list__layout .block-side-content__description-image:before, .block-editor-block-list__layout .block-side-content__description-image:after {
  content: "";
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-repeat: no-repeat;
}
@media (max-width: 74.98rem) {
  .block-editor-block-list__layout .block-side-content__description-image img {
    width: 100%;
  }
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__description--portrait .block-side-content__description-image {
    margin-top: 0.3125rem;
  }
}
.block-editor-block-list__layout .block-side-content__description--portrait .block-side-content__description-image::after {
  background-image: url("../../../images/side-content-image-description/portrait-left.png"), url("../../../images/side-content-image-description/portrait-right.png");
  background-position: left center, right center;
  background-size: 0.375rem 100%, 0.4375rem 100%;
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__description--portrait .block-side-content__description-image::after {
    background-size: 0.625rem 100%, 0.6875rem 100%;
  }
}
.block-editor-block-list__layout .block-side-content__description--portrait .block-side-content__description-image::before {
  width: 100%;
  background-image: url("../../../images/side-content-image-description/portrait-top.png"), url("../../../images/side-content-image-description/portrait-bottom.png");
  background-position: center top, center bottom;
  background-size: 100% 0.375rem, 100% 0.5rem;
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__description--portrait .block-side-content__description-image::before {
    background-size: 100% 0.5rem;
  }
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__description--portrait .block-side-content__description-content {
    padding-left: 0.75rem;
  }
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__description--portrait .block-side-content__description-text p {
    margin-bottom: 2.4375rem;
  }
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__description--landscape {
    flex-direction: column;
    margin-bottom: 4.25rem;
  }
}
.block-editor-block-list__layout .block-side-content__description--landscape .block-side-content__description-image {
  margin-bottom: 1.625rem;
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__description--landscape .block-side-content__description-image {
    margin-bottom: 0.4375rem;
  }
}
.block-editor-block-list__layout .block-side-content__description--landscape .block-side-content__description-image::after {
  background-image: url("../../../images/side-content-image-description/landscape-left.png"), url("../../../images/side-content-image-description/landscape-right.png");
  background-position: left center, right center;
  background-size: 0.375rem 100%;
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__description--landscape .block-side-content__description-image::after {
    background-size: 0.75rem 100%, 0.6875rem 100%;
  }
}
.block-editor-block-list__layout .block-side-content__description--landscape .block-side-content__description-image::before {
  width: 100%;
  background-image: url("../../../images/side-content-image-description/landscape-top.png"), url("../../../images/side-content-image-description/landscape-bottom.png");
  background-position: center top, center bottom;
  background-size: 100% 0.3125rem;
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__description--landscape .block-side-content__description-image::before {
    background-size: 100% 0.5625rem, 100% 0.625rem;
  }
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__description--landscape .block-side-content__description-content {
    flex: 1 0 72%;
    max-width: 72%;
    margin-bottom: 0.4375rem;
  }
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__description--landscape .block-side-content__description-text p {
    margin-bottom: 2rem;
  }
}
.block-editor-block-list__layout .block-side-content__description-content {
  margin-bottom: 2.5625rem;
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__description-content {
    max-width: 40%;
  }
}
.block-editor-block-list__layout .block-side-content__description-title {
  padding-bottom: 1.25rem;
  margin-bottom: 0.875rem;
  border-bottom: 0.0625rem solid #b3b3b3;
}
@media (min-width: 62rem) {
  .block-editor-block-list__layout .block-side-content__description-title {
    padding-bottom: 1.25rem;
  }
}
.block-editor-block-list__layout .block-side-content__description-text p {
  font-size: clamp(0.875rem, 0.7596153846rem + 0.3205128205vw, 1rem);
  line-height: clamp(1.5rem, 1.2692307692rem + 0.641025641vw, 1.75rem);
}
.block-editor-block-list__layout .block-side-content__description-text .c-btn-tertiary::after {
  display: none;
}
@media (min-width: 48rem) {
  .block-editor-block-list__layout .block-side-content + .block-activity-staff {
    margin-top: 6.25rem;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
